'''
                .__  .__          __   
__  _  _______  |  | |  |   _____/  |_ 
\ \/ \/ /\__  \ |  | |  | _/ __ \   __\
 \     /  / __ \|  |_|  |_\  ___/|  |   
  \/\_/  (____  /____/____/\___  >__|  
              \/               \/      
                                     by Commit404 & salobchyanskiy
'''


# –ò–º–ø–æ—Ä—Ç—ã / Imports
import requests
import time
import copy
import random
import os
import json
from config import token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from keyboards import inline_kb1 # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–Ω–æ–ø–∫–∏
from config import config # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ 


client = Bot(token=token)
dp = Dispatcher(client)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / Welcome
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! —è *Crimson Coalition Wallet* - –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ –≤ Telegram. –ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ, —Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @CrimsonCoalition. üí∞.\n–í–∞—à –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π üõ†. ")

 # Wallet / –ö–æ—à–µ–ª–µ–∫
@dp.message_handler(commands=["wallet"])
async def start_command(message: types.Message):
    await message.reply("{0.first_name}, —ç—Ç–æ –≤–∞—à —Å—á–µ—Ç:", reply_markup=inline_kb1)
    
# Settings / –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message_handler(commands=["settings"])
async def start_command(message: types.Message):
  await message.reply("{0.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=inline_kb4")
                      
# Donate / –î–æ–Ω–∞—Ç
@dp.message_handler(commands=["donate"])
async def start_command(message: types.Message):
  await message.reply("{0.first_name}, –º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–∞–∑–≤–∏—Ç–∏–µ–º —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ - –æ—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–∞ –∫–æ—Ñ—Ñ–µ:", reply_markup=inline_kb6")                      
 
# Admin / –ê–¥–º–∏–Ω–∫–∞
@dp.message_handler(commands=["admin"])                      
async def start_command(message: types.Message):
   await message.reply("{0.first_name}, —Ç—ã –Ω–µ –∞–¥–º–∏–Ω")                    
                      
# –î–µ–ª–∞–µ–º —Ç–∞–∫ —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
if __name__ == '__main__':
    executor.start_polling(dp)
